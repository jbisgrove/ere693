import os, sys, shutil, arcpy
import traceback, time
from arcpy import env

def log(message):
    arcpy.AddMessage(message)
    with file(sys.argv[0]+".log", 'a') as logFile:
        logFile.write("%s:\t%s\n" % (time.asctime(), message))
    
class Toolbox(object):
    def __init__(self):
        self.label = "WIP tools"
        self.alias = ""
        self.tools = [TopoHydro, ImpCov, Runoff]
        
class TopoHydro(object):
    def __init__(self):
        self.label = "Topography and Hydrology Analysis"
        self.description = "Establishes the watershed and stream network"
        self.canRunInBackground = False
        
        #arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        #log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Input Digital Elevation Model",
            name="DEM",
            datatype="DERasterDataset",
            parameterType="Optional",#"Required",
            direction="Input",
            multiValue=False)  
            
        param1 = arcpy.Parameter(
            displayName="Analysis Mask",
            name="Mask",
            datatype="DEFeatureClass",
            parameterType="Optional",
            direction="Input",
            multiValue=False)  
        
        param2 = arcpy.Parameter(
            displayName="Threshold accumulation for Stream formation (acres)",
            name="StreamFormation",
            datatype="GPDouble",
            parameterType="Optional",#"Required",
            direction="Input",
            multiValue=False)  
        param3 = arcpy.Parameter(
            displayName="Output Streams Vector",
            name="StreamOutput",
            datatype="DEFeatureClass",
            parameterType="Optional",#"Required",
            direction="Output",
            multiValue=False) 
        params = [ param0, param1, param2,param3 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameters are %s, %s, %s, %s" % (parameters[0].valueAsText, parameters[1].valueAsText, parameters[2].valueAsText,parameters[3].valueAsText))
            # -*- coding: utf-8 -*-
            # ---------------------------------------------------------------------------
            # FindStreams.py
            # Created on: 2016-03-08 12:26:53.00000
            #   (generated by ArcGIS/ModelBuilder)
            # Usage: FindStreams <DEM> <AnalysisMask> <StreamsV> 
            # Description: 
            # ---------------------------------------------------------------------------

            # Script arguments
            DEM = parameters[0].valueAsText
            if DEM == '#' or not DEM:
                DEM = "DEM" # provide a default value if unspecified

            AnalysisMask = parameters[1].valueAsText
            if AnalysisMask == '#' or not AnalysisMask:
                AnalysisMask = "AnalysisMask" # provide a default value if unspecified
            cutoff = parameters[2].valueAsText
            if cutoff == '#' or not cutoff:
                cutoff = '5.0' # provide a default value if unspecified
            StreamsV = parameters[3].valueAsText
            if StreamsV == '#' or not StreamsV:
                StreamsV = "StreamsV" # provide a default value if unspecified

            # Local variables:
            workspace=""#env.Workspace+"\\Lab06Data2.gdb\\"
            DEM_filled = workspace+"DEM_filled"
            AnalysisMaskRaster = workspace+"AnalysisMaskRaster"
            FlowDrop = workspace+"FlowDrop"
            FlowDirection = workspace+"FlowDirection"
            FlowAccumulation = workspace+"FlowAccumulation"
            flowAccumulationAcres = workspace+"flowAccumulationAcres"
            Streams = workspace+"Streams"
            arcpy.AddMessage(DEM)            
            arcpy.AddMessage(DEM_filled)
            # Set Geoprocessing environments
            #arcpy.env.snapRaster = DEM

            # Process: Fill
            
            arcpy.AddMessage('starting DEM Fill')
            arcpy.gp.Fill_sa(DEM,DEM_filled,"")
            #outFill = arcpy.sa.Fill(DEM)
            #outFill.save(DEM_filled)
            arcpy.AddMessage('starting Analysis Mask')
            # Process: Polygon to Raster
            arcpy.PolygonToRaster_conversion(AnalysisMask, "OBJECTID", AnalysisMaskRaster, "CELL_CENTER", "NONE", "40")            
            arcpy.AddMessage('after Polygon to Raster Conversion of Analysis Mask')
            # Process: Flow Direction
            tempEnvironment0 = arcpy.env.mask
            arcpy.env.mask = "AnalysisMaskRaster"
            arcpy.gp.FlowDirection_sa(DEM_filled, FlowDirection, "FORCE", FlowDrop)
            arcpy.env.mask = tempEnvironment0

            # Process: Flow Accumulation
            arcpy.gp.FlowAccumulation_sa(FlowDirection, FlowAccumulation, "", "INTEGER")

            # Process: Raster Calculator
            tempEnvironment0 = arcpy.env.rasterStatistics
            arcpy.env.rasterStatistics = "STATISTICS 1 1"
            #arcpy.gp.RasterCalculator_sa('"%FlowAccumulation%" * 0.036731', flowAccumulationAcres)
            inRaster = arcpy.Raster(FlowAccumulation)
            outRaster = arcpy.sa.Times(inRaster,0.036731)
            outRaster.save(flowAccumulationAcres)

            arcpy.env.rasterStatistics = tempEnvironment0

            # Process: Reclassify
            arcpy.gp.Reclassify_sa(flowAccumulationAcres, "Value", "0 "+str(cutoff)+" NODATA;"+str(cutoff)+" 2000000 1", Streams, "DATA")

            # Process: Raster to Polyline
            arcpy.RasterToPolyline_conversion(Streams, StreamsV, "NODATA", "0", "NO_SIMPLIFY", "Value")
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return
            
class ImpCov(object):
    def __init__(self):
        self.label = "Imperviousness Analysis"
        self.description = "Impervious area contributions"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Impervious Areas",
            name="ImperviousAreas",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
            
        param1 = arcpy.Parameter(
            displayName="Lakes",
            name="Lakes",
            datatype="DEFeatureClass",
            parameterType="Optional",
            direction="Input",
            multiValue=False)  
        
        params = [ param0, param1 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameters are %s, %s" % (parameters[0].valueAsText, parameters[1].valueAsText))
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return
        
class Runoff(object):
    def __init__(self):
        self.label = "Runoff Calculations"
        self.description = "Calculation of standard storm flows via USGS regression equations"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Curve Number",
            name="Landuse",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        params = [ param0 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameter is %s" % (parameters[0].valueAsText))
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return
        
