import os, sys, shutil, arcpy
import traceback, time
from arcpy import env
from arcpy.sa import *

def log(message):
    arcpy.AddMessage(message)
    with file(sys.argv[0]+".log", 'a') as logFile:
        logFile.write("%s:\t%s\n" % (time.asctime(), message))
    
class Toolbox(object):
    def __init__(self):
        self.label = "WIP tools"
        self.alias = ""
        self.tools = [TopoHydro, ImpCov, Runoff]
        
class TopoHydro(object):
    def __init__(self):
        self.label = "Topography and Hydrology Analysis"
        self.description = "Establishes the watershed and stream network"
        self.canRunInBackground = False
        
        #arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        #log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Input Digital Elevation Model",
            name="DEM",
            datatype="DERasterDataset",
            parameterType="Optional",#"Required",
            direction="Input",
            multiValue=False)  
            
        param1 = arcpy.Parameter(
            displayName="Analysis Mask",
            name="Mask",
            datatype="DEFeatureClass",
            parameterType="Optional",
            direction="Input",
            multiValue=False)  
        
        param2 = arcpy.Parameter(
            displayName="Threshold accumulation for Stream formation (acres)",
            name="StreamFormation",
            datatype="GPDouble",
            parameterType="Optional",#"Required",
            direction="Input",
            multiValue=False)  
        param3 = arcpy.Parameter(
            displayName="Output Streams Vector",
            name="StreamOutput",
            datatype="DEFeatureClass",
            parameterType="Required",#"Optional Required",
            direction="Output",
            multiValue=False) 
        params = [ param0, param1, param2, param3 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameters are %s, %s, %s, %s" % (parameters[0].valueAsText, parameters[1].valueAsText, parameters[2].valueAsText,parameters[3].valueAsText))
            # -*- coding: utf-8 -*-
            # ---------------------------------------------------------------------------
            # FindStreams.py
            # Created on: 2016-03-08 12:26:53.00000
            #   (generated by ArcGIS/ModelBuilder)
            # Usage: FindStreams <DEM> <AnalysisMask> <StreamsV> 
            # Description: 
            # ---------------------------------------------------------------------------

            # Script arguments
            DEM = parameters[0].valueAsText
            if DEM == '#' or not DEM:
                DEM = "DEM" # provide a default value if unspecified

            AnalysisMask = parameters[1].valueAsText
            if AnalysisMask == '#' or not AnalysisMask:
                AnalysisMask = "AnalysisMask" # provide a default value if unspecified
            cutoff = parameters[2].valueAsText
            if cutoff == '#' or not cutoff:
                cutoff = '5.0' # provide a default value if unspecified
            StreamsV = parameters[3].valueAsText
            if StreamsV == '#' or not StreamsV:
                StreamsV = "StreamsV" # provide a default value if unspecified

            # Local variables:
            workspace=""#env.Workspace+"\\Lab06Data2.gdb\\"
            DEM_filled = workspace+"DEM_filled"
            AnalysisMaskRaster = workspace+"AnalysisMaskRaster"
            FlowDrop = workspace+"FlowDrop"
            FlowDirection = workspace+"FlowDirection"
            FlowAccumulation = workspace+"FlowAccumulation"
            flowAccumulationAcres = workspace+"flowAccumulationAcres"
            Streams = workspace+"Streams"
            arcpy.AddMessage(DEM)            
            arcpy.AddMessage(DEM_filled)
            # Set Geoprocessing environments
            #arcpy.env.snapRaster = DEM

            # Process: Fill
            
            arcpy.AddMessage('starting DEM Fill')
            arcpy.gp.Fill_sa(DEM,DEM_filled,"")
            #outFill = arcpy.sa.Fill(DEM)
            #outFill.save(DEM_filled)
            arcpy.AddMessage('starting Analysis Mask')
            # Process: Polygon to Raster
            cellSize = 40
            arcpy.PolygonToRaster_conversion(AnalysisMask, "OBJECTID", AnalysisMaskRaster, "CELL_CENTER", "NONE","40" )          #cellSize  #add after using describe  
            arcpy.AddMessage('after Polygon to Raster Conversion of Analysis Mask')
            # Process: Flow Direction
            tempEnvironment0 = arcpy.env.mask
            arcpy.env.mask = "AnalysisMaskRaster"
            arcpy.gp.FlowDirection_sa(DEM_filled, FlowDirection, "FORCE", FlowDrop)
            arcpy.env.mask = tempEnvironment0

            # Process: Flow Accumulation
            arcpy.gp.FlowAccumulation_sa(FlowDirection, FlowAccumulation, "", "INTEGER")

            # Process: Raster Calculator
            tempEnvironment0 = arcpy.env.rasterStatistics
            arcpy.env.rasterStatistics = "STATISTICS 1 1"
            #arcpy.gp.RasterCalculator_sa('"%FlowAccumulation%" * 0.036731', flowAccumulationAcres)
            inRaster = arcpy.Raster(FlowAccumulation)
            outRaster = arcpy.sa.Times(inRaster,0.036731)
            outRaster.save(flowAccumulationAcres)

            arcpy.env.rasterStatistics = tempEnvironment0

            # Process: Reclassify
            arcpy.gp.Reclassify_sa(flowAccumulationAcres, "Value", "0 "+str(cutoff)+" NODATA;"+str(cutoff)+" 2000000 1", Streams, "DATA")

            # Process: Raster to Polyline
            arcpy.RasterToPolyline_conversion(Streams, StreamsV, "NODATA", "0", "NO_SIMPLIFY", "Value")
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return
            
class ImpCov(object):
    def __init__(self):
        self.label = "Imperviousness Analysis"
        self.description = "Impervious area contributions"
        self.canRunInBackground = False
        
        #arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        #log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        
        param0 = arcpy.Parameter(
            displayName="Impervious Areas",
            name="ImperviousAreas",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
            
        param1 = arcpy.Parameter(
            displayName="DEM (filled)",
            name="DEM",
            datatype="DERasterDataset",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        param2 = arcpy.Parameter(
            displayName="Weighted Streams Feature Class",
            name="WeightedStreamFeatures",
            datatype="DEFeatureClass",
            parameterType="Required",
            direction="Output",
            multiValue=False)  
        params = [ param0, param1, param2 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameters are %s, %s,%s" % (parameters[0].valueAsText, parameters[1].valueAsText,parameters[2].valueAsText))
            # -*- coding: utf-8 -*-
            # ---------------------------------------------------------------------------
            # Impervious.py
            # Created on: 2016-03-22 04:06:22.00000
            #   (generated by ArcGIS/ModelBuilder)
            # Usage: Impervious <Impervious> <DEM> <ImperviousRaster> 
            # Description: 
            # ---------------------------------------------------------------------------
            # Script arguments
            Impervious = arcpy.GetParameterAsText(0)
            if Impervious == '#' or not Impervious:
                Impervious = "Impervious" # provide a default value if unspecified

            DEM = arcpy.GetParameterAsText(1)
            if DEM == '#' or not DEM:
                DEM = "DEM" # provide a default value if unspecified
            
            WeightedStreamsV = arcpy.GetParameterAsText(2)
            if WeightedStreamsV == '#' or not WeightedStreamsV:
                WeightedStreamsV = "WeightedStreamsV" # provide a default value if unspecified

            # Local variables:
            CellSize = 40  #Get from Describe Statement
            Streams = "Streams"
            FlowDirection = "FlowDirection"

            sumCellData = "BlockStatistics"
            Aggregate = "Aggregate"
            AggregateFlowAccumulation = "AggregateFlowAccumulation"
            FlowAccumulation = "FlowAccumulation"
            AccumulationRatio = "AccumulationRatio"
            AccumulationPercent = "AccumulationPercent"
            ImperviousRaster = "ImperviousRaster"
            ImperviousWeightedStreams = "ImperviousWeightedStreams"
            arcpy.AddMessage(DEM) 
            arcpy.AddMessage(Impervious)
            arcpy.AddMessage(WeightedStreamsV)
            # Process: Calculate Value
            #arcpy.CalculateValue_management("modCellSize(%CellSize%)", "def modCellSize(cellsize):\\n return cellsize/10.0", "")
            smallCellSize=CellSize/10.0
            # Process: Calculate Field
            arcpy.CalculateField_management(Impervious, "LENGTH", "1", "VB", "")
            arcpy.AddMessage('Impervious Length Field Update Done')
            # Process: Polygon to Raster
            arcpy.PolygonToRaster_conversion(Impervious, "LENGTH", ImperviousRaster, "CELL_CENTER", "NONE", smallCellSize)
            arcpy.AddMessage('Impervious Conversion Done')
            # Process: Block Statistics
            arcpy.gp.BlockStatistics_sa(ImperviousRaster, sumCellData, "Rectangle 10 10 CELL", "SUM", "DATA")
            arcpy.AddMessage('Block Statistics Done')
            # Process: Aggregate
            arcpy.gp.Aggregate_sa(sumCellData, Aggregate, "10", "MEAN", "EXPAND", "DATA")
            arcpy.AddMessage('Aggregate Done')
            # Process: Flow Accumulation
            arcpy.gp.FlowAccumulation_sa(FlowDirection, AggregateFlowAccumulation, Aggregate, "FLOAT")
            arcpy.AddMessage('Flow Accumulation Done')
            # Process: Ratio Accumulation
            #arcpy.gp.RasterCalculator_sa("\"%AggregateFlowAccumulation%\"/\"%FlowAccumulation%\"", AccumulationRatio)
            outDivide = Divide(AggregateFlowAccumulation,FlowAccumulation)
            outDivide.save(AccumulationRatio)
            arcpy.AddMessage('Accumulation Ratio Done')
            # Process: Accumulation Ratio to 10 Percent Classes
            arcpy.gp.Reclassify_sa(AccumulationRatio, "Value", "0 10 5;10 20 15;20 30 25;30 40 35;40 50 45;50 60 55;60 70 65;70 80 75;80 90 85;90 100 95", AccumulationPercent, "DATA")
            arcpy.AddMessage('Reclassify to Percentage Done')
            # Process: Weight Streams
            #arcpy.gp.RasterCalculator_sa("\"%Streams%\" * \"%AccumulationPercent%\"", ImperviousWeightedStreams)
            outMultiply =Times(Streams,AccumulationPercent)
            outMultiply.save(ImperviousWeightedStreams)
            arcpy.AddMessage('Weighted Streams Raster Done')
            # Process: Raster to Polyline
            arcpy.RasterToPolyline_conversion(ImperviousWeightedStreams, WeightedStreamsV, "ZERO", "0", "SIMPLIFY", "Value")
            arcpy.AddMessage('Raster to Ployline Done, End of Function')
        
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return
        
class Runoff(object):
    def __init__(self):
        self.label = "Runoff Calculations"
        self.description = "Calculation of standard storm flows via USGS regression equations"
        self.canRunInBackground = False
        
        arcpy.env.Workspace = self.Workspace = os.path.split(__file__)[0]
        log("Workspace = " + arcpy.env.Workspace)
        arcpy.env.overwriteOutput = True       

    def getParameterInfo(self):
        """Define parameter definitions"""
        param0 = arcpy.Parameter(
            displayName="Qn",
            name="Qn",
            datatype="DERasterDataset",
            parameterType="Required",
            direction="Output",
            multiValue=False)  
                
        param1 = arcpy.Parameter(
            displayName="interval",
            name="interval",
            datatype="GPLong",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        param2 = arcpy.Parameter(
            displayName="QnDaConstant",
            name="QnDaConstant",
            datatype="GPDouble",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        param3 = arcpy.Parameter(
            displayName="QnDaExponent",
            name="QnDaExponent",
            datatype="GPDouble",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        param4 = arcpy.Parameter(
            displayName="QnIaExponent",
            name="QnIaExponent",
            datatype="GPDouble",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        param5 = arcpy.Parameter(
            displayName="QnRqExponent",
            name="QnRqExponent",
            datatype="GPDouble",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        param6 = arcpy.Parameter(
            displayName="RQConstant",
            name="RQConstant",
            datatype="GPDouble",
            parameterType="Required",
            direction="Input",
            multiValue=False)
        param7 = arcpy.Parameter(
            displayName="RQExponent",
            name="RQExponent",
            datatype="GPDouble",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        param8 = arcpy.Parameter(
            displayName="FlowAccumulation (sqMiles)",
            name="FlowAccumulationSqMiles",
            datatype="DERasterDataset",
            parameterType="Required",
            direction="Input",
            multiValue=False)  
        
        
        params = [ param0,param1,param2,param3,param4,param5,param6,param7,param8 ]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        return

    def updateMessages(self, parameters):
        return
            
    def execute(self, parameters, messages):
        try:
            log("Parameter is %s" % (parameters[0].valueAsText))
            # -*- coding: utf-8 -*-
            # ---------------------------------------------------------------------------
            # FloodsUrban.py
            # Created on: 2016-03-22 04:04:35.00000
            #   (generated by ArcGIS/ModelBuilder)
            # Usage: FloodsUrban <Qn> <interval> <QnDaConstant> <QnDaExponent> <QnIaExponent> <QnRqExponent> <RQConstant> <RQExponent> 
            # Description: 
            # ---------------------------------------------------------------------------

            # Import arcpy module
            import arcpy
            from arcpy.sa import *
            # Script arguments

            interval = arcpy.GetParameter(1)
            if interval == '#' or not interval:
                interval = 25 # provide a default value if unspecified

            Qn = arcpy.GetParameterAsText(0)
            arcpy.AddMessage(Qn)   
            if Qn == '#' or not Qn:
                Qn = "Q"+str(interval) # provide a default value if unspecified
            else:
                Qn+=str(interval)
            arcpy.AddMessage(Qn)    
            QnDaConstant = arcpy.GetParameter(2)
            if QnDaConstant == '#' or not QnDaConstant:
                QnDaConstant = float(28.5) # provide a default value if unspecified

            QnDaExponent = arcpy.GetParameter(3)
            if QnDaExponent == '#' or not QnDaExponent:
                QnDaExponent = float(0.39) # provide a default value if unspecified

            QnIaExponent = arcpy.GetParameter(4)
            if QnIaExponent == '#' or not QnIaExponent:
                QnIaExponent = float(0.436) # provide a default value if unspecified

            QnRqExponent = arcpy.GetParameter(5)
            if QnRqExponent == '#' or not QnRqExponent:
                QnRqExponent = float(0.338) # provide a default value if unspecified

            RQConstant = arcpy.GetParameter(6)
            if RQConstant == '#' or not RQConstant:
                RQConstant = float(467) # provide a default value if unspecified

            RQExponent = arcpy.GetParameter(7)
            if RQExponent == '#' or not RQExponent:
                RQExponent = float(0.655) # provide a default value if unspecified

            FlowAccumulationSqMiles = arcpy.GetParameterAsText(8)
            if FlowAccumulationSqMiles == '#' or not FlowAccumulationSqMiles:
                FlowAccumulationSqMiles = "FlowAccumulationSqMiles" # provide a default value if unspecified

            #RuralFlood = arcpy.GetParameterAsText(9)
            #if RuralFlood == '#' or not RuralFlood:
            #    RuralFlood = "RuralFlood"+str(interval) # provide a default value if unspecified
            #else:
            #    RuralFlood+=str(interval)
            RuralFlood = "RuralFlood"+str(interval)
            AccumulationRatio = "AccumulationRatio"
            outRaster = Power(FlowAccumulationSqMiles,float(RQExponent)) #FlowAccumulationSqMiles
            outRasterRF = Times(float(RQConstant),outRaster)
            outRasterRF.save(RuralFlood)

            outRasterDA = Power(FlowAccumulationSqMiles,float(QnDaExponent))
            outRasterDA = Times(outRasterDA,float(QnDaConstant))
            outRasterIA = Power(AccumulationRatio,float(QnIaExponent))
            
            outRasterRQ = Power(RuralFlood,float(QnRqExponent)) #RuralFlood
            outRaster = Times(outRasterDA,outRasterIA)
            outRaster2 = Times(outRaster,outRasterRQ)
            outRaster2.save(Qn)
        except Exception as err:
            log(traceback.format_exc())
            log(err)
            raise err
        return
        
